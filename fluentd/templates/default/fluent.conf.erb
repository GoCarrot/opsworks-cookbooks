
<system>
  log_level <%= node[:fluentd][:log_level] %>
</system>

## built-in TCP input
## $ echo <json> | fluent-cat <tag>
<source>
  @type forward
</source>

## built-in UNIX socket input
#<source>
#  @type unix
#</source>

# HTTP input
# http://localhost:8888/<tag>?json=<json>
<source>
  @type http
  port 8888
</source>

## File input
## read apache logs with tag=apache.access
#<source>
#  @type tail
#  format apache
#  path /var/log/httpd-access.log
#  tag apache.access
#</source>

# Listen HTTP for monitoring
# http://localhost:24220/api/plugins
# http://localhost:24220/api/plugins?type=TYPE
# http://localhost:24220/api/plugins?tag=MYTAG
<source>
  @type monitor_agent
  bind 0.0.0.0
  port 24220
</source>

# Listen DRb for debug
<source>
  @type debug_agent
  port 24230
</source>


## match tag=apache.access and write to file
#<match apache.access>
#  @type file
#  path /var/log/fluent/access
#</match>

## match tag=debug.** and dump to console
<match debug.**>
  @type stdout
</match>

## match tag=myapp.** and forward and write to file
#<match myapp.**>
#  @type copy
#  <store>
#    @type forward
#    host 192.168.0.13
#    buffer_type file
#    buffer_path /var/log/fluent/myapp-forward
#    retry_limit 50
#    flush_interval 10s
#  </store>
#  <store>
#    @type file
#    path /var/log/fluent/myapp
#  </store>
#</match>

## match fluent's internal events
#<match fluent.**>
#  @type null
#</match>

## match not matched logs and write to file
#<match **>
#  @type file
#  path /var/log/fluent/else
#  compress gz
#</match>

<% if node[:fluentd][:tail] %>
<% node[:fluentd][:tail].each do |conf| %>
<source>
  @type tail
  path <%= conf[:path] %>
  pos_file /var/log/fluent/<%= conf[:path].gsub("/", ".") %>.pos
  tag <%= conf[:tag] %>
  format <%= conf[:format] %>
  <% if conf[:exclude_path] %>
  exclude_path <%= conf[:exclude_path] %>
  <% end %>
</source>
<% end %>
<% end %>

<% if node[:fluentd][:mysql] %>
<% node[:fluentd][:mysql].each do |conf| %>
<match <%= conf[:tag] %>>
  @type mysql
  buffer_type file
  buffer_path /var/log/fluent/<%= conf[:tag] %>_mysql.buffer
  host <%= conf[:host] %>
  database <%= conf[:database] %>
  username <%= conf[:username] %>
  password <%= conf[:password] %>
  table <%= conf[:table] %>
  key_names <%= conf[:key_names] %>
  sql INSERT IGNORE INTO <%= conf[:table] %> (<%= conf[:key_names] %>) VALUES (<%= ("?," * conf[:key_names].split(",").length)[0..-2] %>)
  flush_interval 10s
  retry_wait 1s
  retry_limit 17
  buffer_queue_limit 128
</match>
<% end %>
<% end %>

<% if node[:fluentd][:mysql_bulk] %>
<% node[:fluentd][:mysql_bulk].each do |conf| %>
<match <%= conf[:tag] %>>
  @type mysql_bulk
  buffer_type file
  buffer_path /var/log/fluent/<%= conf[:tag] %>_mysql.buffer
  host <%= conf[:host] %>
  database <%= conf[:database] %>
  username <%= conf[:username] %>
  password <%= conf[:password] %>
  table <%= conf[:table] %>
  key_names <%= conf[:key_names] %>
  column_names <%= conf[:key_names] %>
  insert_ignore true
  max_rows_per_insert <%= conf[:max_rows_per_insert] || 100 %>
  flush_interval 10s
  retry_wait 1s
  retry_limit 17
  buffer_queue_limit 128
</match>
<% end %>
<% end %>

<% if node[:fluentd][:http] %>
<% node[:fluentd][:http].each do |conf| %>
<match <%= conf[:tag] %>>
  @type bufferize
  buffer_type file
  buffer_path /var/log/fluent/<%=conf[:tag]%>_http.buffer
  flush_interval 1s
  <config>
    type http
    endpoint_url <%= conf[:endpoint_url] %>
    <% if conf[:http_method] %>
    http_method <%= conf[:http_method] %>
    <% end %>
    raise_on_error true
  </config>
</match>
<% end %>
<% end %>

<% if node[:fluentd][:sidekiq] %>
<match sidekiq>
  @type sidekiq
  redis_url <%= node[:fluentd][:sidekiq][:url] %>
  flush_interval 60s
  retry_wait 1s
  retry_limit 17
  buffer_queue_limit 128
  max_batch_size <%= node[:fluentd][:sidekiq][:batch_size] || 10 %>
</match>
<% end %>

<% if node[:fluentd][:m_sidekiq] %>
<% node[:fluentd][:m_sidekiq].each do |conf| %>
<match <%= conf[:tag] %>>
  @type sidekiq
  buffer_type file
  buffer_path /var/log/fluent/<%= conf[:tag] %>_sidekiq.buffer
  redis_url <%= conf[:url] %>
  flush_interval <%= conf[:flush_interval] || "60s" %>
  retry_wait 1s
  retry_limit 17
  buffer_queue_limit 128
  max_batch_size <%= conf[:batch_size] || 10 %>
</match>
<% end %>
<% end %>

<% if node[:fluentd][:cloudwatch_out] %>
<% node[:fluentd][:cloudwatch_out].each do |conf| %>
<match <%= conf[:tag] %>>
  @type cloudwatch_logs
  buffer_type file
  buffer_path /var/log/fluent/<%= conf[:tag] %>_cloudwatch.buffer
  flush_interval <%= conf[:flush_interval] || "60s" %>
  log_group_name <%= conf[:log_group_name] %>
  log_stream_name <%= conf[:log_stream_name] || node[:opsworks][:instance][:hostname] %>
  region <%= conf[:region] || node[:opsworks][:instance][:region] %>
  auto_create_stream true
</match>
<% end %>
<% end %>
